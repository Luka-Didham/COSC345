Index: app/src/main/java/com/example/KickOns/WelcomePage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.KickOns\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.example.KickOns.R\r\nimport com.google.firebase.analytics.FirebaseAnalytics\r\nimport com.google.firebase.analytics.ktx.analytics\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\n\r\n/**\r\n * The Screen that is displayed immediately after the splash screen,\r\n * shows the buttons to start the game, and help.\r\n *\r\n */\r\nclass WelcomePage : AppCompatActivity() {\r\n    private lateinit var analytics: FirebaseAnalytics\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.welcome_page)\r\n\r\n        //Buttons\r\n        val btnHelp = findViewById<Button>(R.id.btnHelp)\r\n        val btnPlay = findViewById<Button>(R.id.btnPlay)\r\n\r\n        analytics = Firebase.analytics\r\n        // Write a message to the database\r\n        val db = Firebase.firestore\r\n        // Create a new user with a first and last name\r\n\r\n        db.collection(\"Decks\")\r\n            .get()\r\n            .addOnSuccessListener { result ->\r\n                for (document in result) {\r\n                    Log.d(\"TAG\", \"${document.id} => ${document.data}\")\r\n                }\r\n            }\r\n            .addOnFailureListener { exception ->\r\n                Log.w(\"TAG\", \"Error getting documents.\", exception)\r\n            }\r\n\r\n        //SHOWCASE MODE\r\n        //TODO \"make sure cards arent added twice to example deck\"\r\n        PopulateDecks(applicationContext).clearDeck()\r\n        PopulateDecks(applicationContext).insert()\r\n\r\n        btnPlay.setOnClickListener {\r\n            val intent = Intent(this, AddPlayer::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n      btnHelp.setOnClickListener {\r\n          val intent = Intent(this, HelpPage::class.java)\r\n       startActivity(intent)\r\n    }\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/KickOns/WelcomePage.kt b/app/src/main/java/com/example/KickOns/WelcomePage.kt
--- a/app/src/main/java/com/example/KickOns/WelcomePage.kt	(revision 172a379e766a88a471e172296f190368756e13ed)
+++ b/app/src/main/java/com/example/KickOns/WelcomePage.kt	(date 1664816095480)
@@ -31,21 +31,6 @@
         val btnPlay = findViewById<Button>(R.id.btnPlay)
 
         analytics = Firebase.analytics
-        // Write a message to the database
-        val db = Firebase.firestore
-        // Create a new user with a first and last name
-
-        db.collection("Decks")
-            .get()
-            .addOnSuccessListener { result ->
-                for (document in result) {
-                    Log.d("TAG", "${document.id} => ${document.data}")
-                }
-            }
-            .addOnFailureListener { exception ->
-                Log.w("TAG", "Error getting documents.", exception)
-            }
-
         //SHOWCASE MODE
         //TODO "make sure cards arent added twice to example deck"
         PopulateDecks(applicationContext).clearDeck()
Index: app/src/main/java/com/example/KickOns/OnlineDeckPicker.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.KickOns\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport com.example.KickOns.databinding.DeckPickerBinding\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\n\r\nclass OnlineDeckPicker: DeckPicker() {\r\n    val db = Firebase.firestore\r\n\r\n    override fun switchDeck(){\r\n        val intent = Intent(this,DeckPicker::class.java)\r\n        startActivity(intent)\r\n    }\r\n    override suspend fun getDecks(myCallback: FirebaseCallback) {\r\n        db.collection(\"Decks\")\r\n            .get()\r\n            .addOnSuccessListener { result ->\r\n                val decks = mutableListOf<DeckItem>()\r\n                for (document in result) {\r\n                    val d = DeckItem(null,document.get(\"name\").toString())\r\n                    decks.add(d)\r\n                    Log.d(\"TAG\", \"${document.id} => ${document.data}\")\r\n                }\r\n                myCallback.onResponse(decks)\r\n            }\r\n            .addOnFailureListener { exception ->\r\n                Log.w(\"TAG\", \"Error getting documents.\", exception)\r\n            }\r\n\r\n    }\r\n    override fun onClick(deck: DeckItem) {\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        val d = deck.id\r\n        GlobalScope.launch{\r\n            //Querry db and wait for response\r\n            getCards(deck.id)\r\n            //On main launch next page\r\n            withContext(Dispatchers.Main){\r\n                intent.putExtra(\"id\",deck.id)\r\n                startActivity(intent)\r\n            }\r\n        }\r\n    }\r\n    override suspend fun getCards(id: Int?) {\r\n        cardList.clear()\r\n        //TODO get the cards from the db related to the id you pressed\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/KickOns/OnlineDeckPicker.kt b/app/src/main/java/com/example/KickOns/OnlineDeckPicker.kt
--- a/app/src/main/java/com/example/KickOns/OnlineDeckPicker.kt	(revision 172a379e766a88a471e172296f190368756e13ed)
+++ b/app/src/main/java/com/example/KickOns/OnlineDeckPicker.kt	(date 1664816020068)
@@ -19,7 +19,7 @@
         val intent = Intent(this,DeckPicker::class.java)
         startActivity(intent)
     }
-    override suspend fun getDecks(myCallback: FirebaseCallback) {
+    override fun getDecks(myCallback: FirebaseCallback) {
         db.collection("Decks")
             .get()
             .addOnSuccessListener { result ->
Index: app/src/main/java/com/example/KickOns/DeckPicker.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.KickOns\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.provider.Settings\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.ItemTouchHelper\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.KickOns.databinding.DeckPickerBinding\r\nimport com.google.android.gms.common.api.Response\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport kotlinx.coroutines.*\r\n\r\nopen class DeckPicker() : AppCompatActivity(), DeckClickListener {\r\n    private lateinit var db: CardDB\r\n    private lateinit var binding: DeckPickerBinding\r\n    private lateinit var deckDao: DeckDAO\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = DeckPickerBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        //Elements\r\n        val mainActivity = this\r\n        val recyclerView = binding.recyclerView\r\n        val btnCreateDeckFromChoose = findViewById<Button>(R.id.btnCreateDeckFromChoose)\r\n\r\n        val btnOnline = findViewById<Button>(R.id.btnOnline)\r\n        //Speed at which items are deleted\r\n\r\n        recyclerView.itemAnimator?.removeDuration = 5\r\n        val swipeGesture = object : SwipeGesture(this){\r\n            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {\r\n                when(direction){\r\n                    ItemTouchHelper.LEFT ->{\r\n                        delete(deckList[viewHolder.adapterPosition], viewHolder.adapterPosition)\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        val touchHelper = ItemTouchHelper(swipeGesture)\r\n        touchHelper.attachToRecyclerView(binding.recyclerView)\r\n\r\n        db = CardDB.getDatabase(this)\r\n        deckDao = db.deckDAO()\r\n\r\n        GlobalScope.launch {\r\n            getDecks(object: FirebaseCallback{\r\n                override fun onResponse(response: MutableList<DeckItem>) {\r\n                  deckList = response\r\n                    binding.recyclerView.apply {\r\n                        layoutManager =\r\n                            LinearLayoutManager(applicationContext, LinearLayoutManager.VERTICAL, false)\r\n                        Log.d(\"dl\", deckList.size.toString())\r\n                        adapter = DeckAdapter(deckList,mainActivity)\r\n                    }\r\n                }\r\n\r\n            })\r\n\r\n        }\r\n\r\n        btnOnline.setOnClickListener{\r\n            switchDeck()\r\n        }\r\n\r\n        btnCreateDeckFromChoose.setOnClickListener {\r\n            val intent = Intent(this, DeckCreation::class.java)\r\n\r\n            startActivity(intent)\r\n        }\r\n\r\n    }\r\n    fun delete(deck: DeckItem, pos : Int){\r\n        deckList.remove(deck)\r\n        binding.recyclerView.adapter?.notifyItemRemoved(pos)\r\n        GlobalScope.launch {\r\n            deckDao.delete(deck)\r\n        }\r\n    }\r\n\r\n    open fun switchDeck(){\r\n        val intent = Intent(this,OnlineDeckPicker::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n     override fun edit(deck: DeckItem) {\r\n         val intent = Intent(this, EditDeck::class.java)\r\n            intent.putExtra(\"id\",deck.id)\r\n         GlobalScope.launch {\r\n                getCards(deck.id)\r\n                withContext(Dispatchers.Main){\r\n                    startActivity(intent)\r\n                }\r\n            }\r\n\r\n     }\r\n\r\n    override fun onClick(deck: DeckItem) {\r\n       val intent = Intent(this, MainActivity::class.java)\r\n        val d = deck.id\r\n        GlobalScope.launch{\r\n            //Querry db and wait for response\r\n            getCards(deck.id)\r\n            //On main launch next page\r\n            withContext(Dispatchers.Main){\r\n                intent.putExtra(\"id\",deck.id)\r\n                startActivity(intent)\r\n            }\r\n        }\r\n    }\r\n\r\n    open suspend fun getCards(id: Int?) {\r\n        cardList.clear()\r\n        val cards = db.cardDAO().getByDeckId(id)\r\n        cards.forEach {\r\n            cardList.add(it)\r\n        }\r\n    }\r\n\r\n    open suspend fun getDecks(myCallback: FirebaseCallback){\r\n        deckList.clear()\r\n        val decks = mutableListOf<DeckItem>()\r\n        for(deck in deckDao.getAll()){\r\n            decks.add(deck)\r\n        }\r\n        myCallback.onResponse(decks)\r\n    }\r\n\r\n    private fun editDeck(d: DeckItem){\r\n        val intent = Intent(this, EditDeck::class.java)\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/KickOns/DeckPicker.kt b/app/src/main/java/com/example/KickOns/DeckPicker.kt
--- a/app/src/main/java/com/example/KickOns/DeckPicker.kt	(revision 172a379e766a88a471e172296f190368756e13ed)
+++ b/app/src/main/java/com/example/KickOns/DeckPicker.kt	(date 1664816020073)
@@ -125,7 +125,7 @@
         }
     }
 
-    open suspend fun getDecks(myCallback: FirebaseCallback){
+    open fun getDecks(myCallback: FirebaseCallback){
         deckList.clear()
         val decks = mutableListOf<DeckItem>()
         for(deck in deckDao.getAll()){
